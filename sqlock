#!/bin/bash
# mutex for distributed tasks, ideally suited for cron tasks
# that might otherwise run on duplicate servers in a cluster unnecessarily
#
# usage: sqlock command args
#
# Tries to get a lock to run command plus its arguments; if the lock is
# successful, the command will be run, if not, we exit.
#
# Uses Mysql's GET_LOCK() function
set -eu

# How long to wait to see if we successfully got the lock.
# Don't set to a negative value, as mysql will wait forever.
LOCKTIMEOUT_SECONDS=1 # you can edit this

# Mysql credentials - edit these with your details
MYSQL_PATH=/usr/local/bin/mysql
MYSQL_USER=root
MYSQL_PASSWORD=
MYSQL_HOST=127.0.0.1

# Set up Mysql credentials. Will use -p$MYSQL_PASSWORD if you've
# defined MYSQL_PASSWORD, otherwise will use a passwordless connection
MYSQL_CREDENTIALS="-u $MYSQL_USER -h $MYSQL_HOST"
if [ -n "$MYSQL_PASSWORD" ]; then
  MYSQL_CREDENTIALS="$MYSQL_CREDENTIALS -p$MYSQL_PASSWORD"
fi

# Convert our arguments into a unique string we can use as the lock key
lockstring="${@//[^[:alpha:]]/_}"

command=${1:-}

# Help text
usage() {
  cat <<-USAGE
  sqlock command [args]

  'command' is any command you wish to run, and 'args' is the optional arguments
  for it.

  For example:

  sqlock echo hello world
  sqlock bash -c "/usr/local/bin/foo; sleep 10; echo done"

  The combination of your command and its arguments form a unique key which
  means that sqlock is able to guarantee that only one instance of your command
  and its args are run at the same time, either locally or across a network.
USAGE
}

# Show help and exit
usage_and_exit() {
  usage >&2 && exit 1
}

# Kill the backgrounded tasks and then remove the temp folder that
# holds the fifo and sql log
tidyup() {
  { kill ${children[@]}; wait ${children[@]}; } 2>/dev/null;
  rm -rf "$tmpdir";
}

# Exit if we weren't passed a command to run
if [ -z "$command" ]; then
  usage_and_exit
fi

# Only -h and -? are valid options
while getopts "h?" opt; do
  case ${opt} in
    h) usage_and_exit ;;
    \?) usage_and_exit ;;
  esac
done

# Make a fifo in a random temp folder
tmpdir=$(mktemp -d) && {
  fifo="$tmpdir/fifo"
  mkfifo "$fifo"
}

# Tail the fifo to keep it open, pipe to mysql in unbuffered mode
# and capture the output
tail -f "$fifo" | $MYSQL_PATH --unbuffered $MYSQL_CREDENTIALS -N > "$tmpdir"/sql.log &
children=( "$!" $(jobs -rp) )
# So we don't get messages about the terminated background tasks later
disown

# Now try and get the lock
echo "SELECT IF(GET_LOCK('$lockstring',$LOCKTIMEOUT_SECONDS)=1,'Got lock', concat('Already locked by connection: ', IS_USED_LOCK('$lockstring')));" >$fifo

# Sleep for long enough to see whether we got the lock - we add 1 second
# to the timeout, because the fifo output can still suffer from a slight delay
sleep $(( $LOCKTIMEOUT_SECONDS + 1 ))
grep -q "Got lock" "$tmpdir"/sql.log || (grep "Already locked" "$tmpdir"/sql.log >&2; tidyup; exit 1)

# If we're still running, we got the lock, so now execute the commands
# that were passed to us:
"$@"

# release the lock
echo "SELECT RELEASE_LOCK('$lockstring');" >$fifo

tidyup
